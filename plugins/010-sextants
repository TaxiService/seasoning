#!/usr/bin/env bash
# mid: Sextants 3-in-1 barclock (top=secs, mid=mins, bot=hours) using U+1CE51..U+1CE8F
set -euo pipefail

OUT="${WAYBAR_OUTPUT_NAME:-$(/usr/bin/seasoning which-output 2>/dev/null || echo default)}"
CACHE="${SEASONING_CACHE:-$HOME/.cache/seasoning}/$OUT"
MODE_FILE="$CACHE/mode.010-sextants.state"
mkdir -p "$CACHE"
mode=0; [[ -r "$MODE_FILE" ]] && read -r mode <"$MODE_FILE" || true
case "${mode:-0}" in 0|1|2) :;; *) mode=0;; esac

# --------- UTF-8 encoder ----------
cp_utf8() { # $1 = integer codepoint (decimal or 0x..)
  local cp=$1; [[ $cp == 0x* ]] && cp=$((cp))
  if   ((cp<=0x7F));   then printf '\\x%02X' "$cp"
  elif ((cp<=0x7FF));  then printf '\\x%02X\\x%02X' \
      $((0xC0 | (cp>>6))) $((0x80 | (cp & 0x3F)))
  elif ((cp<=0xFFFF)); then printf '\\x%02X\\x%02X\\x%02X' \
      $((0xE0 | (cp>>12))) $((0x80 | ((cp>>6)&0x3F))) $((0x80 | (cp & 0x3F)))
  else printf '\\x%02X\\x%02X\\x%02X\\x%02X' \
      $((0xF0 | (cp>>18))) $((0x80 | ((cp>>12)&0x3F))) \
      $((0x80 | ((cp>>6)&0x3F))) $((0x80 | (cp & 0x3F)))
  fi
}

# mask bits: TL(5) TR(4) ML(3) MR(2) BL(1) BR(0)
sextant_cp_from_mask() { # $1=mask 0..63
  local m=$1
  (( m==0 )) && { printf ' '; return; }
  # reverse 6 bits: TL→b0, TR→b1, ML→b2, MR→b3, BL→b4, BR→b5
  local r=0
  (( r |= ((m>>5)&1) << 0 ))   # TL
  (( r |= ((m>>4)&1) << 1 ))   # TR
  (( r |= ((m>>3)&1) << 2 ))   # ML
  (( r |= ((m>>2)&1) << 3 ))   # MR
  (( r |= ((m>>1)&1) << 4 ))   # BL
  (( r |= ((m>>0)&1) << 5 ))   # BR
  # 1→U+1CE51 … 63→U+1CE8F ; 0→space
  local cp=$((0x1CE50 + r))
  printf '%b' "$(cp_utf8 "$cp")"
}


# Progress units per row (0..59). Each column i shows two units.
units_for_col(){ # $1=prog(0..59) $2=col(0..29)
  local u=$(( $1 - 2*$2 ))
  (( u<0 )) && u=0
  (( u>2 )) && u=2
  printf '%d' "$u"
}

# Compose a cell from three row-unit counts (0/1/2 each)
make_cell(){ # $1=col $2=s_prog $3=m_prog $4=h_prog
  local i=$1 su mu hu mask=0
  su=$(units_for_col "$2" "$i")
  mu=$(units_for_col "$3" "$i")
  hu=$(units_for_col "$4" "$i")
  # top row → bits TL(5)/TR(4)
  (( su>=1 )) && (( mask |= 1<<5 ))
  (( su==2 )) && (( mask |= 1<<4 ))
  # mid row → bits ML(3)/MR(2)
  (( mu>=1 )) && (( mask |= 1<<3 ))
  (( mu==2 )) && (( mask |= 1<<2 ))
  # bot row → bits BL(1)/BR(0)
  (( hu>=1 )) && (( mask |= 1<<1 ))
  (( hu==2 )) && (( mask |= 1<<0 ))

  sextant_cp_from_mask "$mask"
}

# --- time to progress ---
read -r H M S < <(date '+%H %M %S')
h=$((10#$H)); m=$((10#$M)); s=$((10#$S))
secs_prog=$s
mins_prog=$m
mins_in_12=$(( (h%12)*60 + m ))
hours_prog=$(( mins_in_12 / 12 ))   # 0..59 (12 min per tick)

# --- render with separators ---
out='│'
for ((i=0;i<30;i++)); do
  out+=$(make_cell "$i" "$secs_prog" "$mins_prog" "$hours_prog")
  case "$i" in
    4|9|19|24) out+='╵' ;;
    14)        out+='│' ;;
  esac
done
out+='│'

printf '{"text":"%s","class":"mid--010-sextants"}\n' "$out"
