#!/usr/bin/env bash
# seasoning: minimal CLI for Waybar integration
# Why strict: avoid stray output that breaks JSON
set -euo pipefail
IFS=$'\n\t'
LC_ALL=C

BASE_DIR="/usr/share/seasoning/plugins"
CACHE_BASE="${HOME}/.cache/seasoning"

die(){ printf 'error: %s\n' "$*" >&2; exit 1; }

# -- helpers ---------------------------------------------------------------
json_escape() {  # why: ensure plugin text becomes valid JSON string
  local s=${1//\\/\\\\}; s=${s//\"/\\\"}
  s=${s//$'\t'/\\t}; s=${s//$'\r'/}; s=${s//$'\n'/}
  printf '%s' "$s"
}

parse_output(){ printf '%s\n' "${WAYBAR_OUTPUT_NAME:-$("$0" which-output 2>/dev/null || echo default)}"; }

state_dir(){ printf '%s/%s' "$CACHE_BASE" "$1"; }
state_file(){ printf '%s/%s' "$(state_dir "$1")" "$2"; }

read_int(){ local f="$1" d="${2:-0}"; [[ -f "$f" ]] && cat "$f" || printf '%s' "$d"; }
write_int(){ local f="$1" v="$2"; mkdir -p "$(dirname "$f")"; printf '%s' "$v" >"$f"; }

scan_plugins() {  # list absolute plugin paths for a kind, sorted naturally
  local kind="$1"; local dir="$BASE_DIR/${kind}.d"
  [[ -d "$dir" ]] || return
  find "$dir" -maxdepth 1 -type f -executable -printf '%p\n' | sort -V
}

count_plugins(){ scan_plugins "$1" | wc -l | tr -d ' '; }

cls_from_path(){  # derive CSS class from filename
  local b; b="$(basename "$1")"
  b="${b%.*}"; b="${b//[^a-zA-Z0-9]+/-}"
  printf 'clock--%s' "${b,,}"
}

pair_line_at(){  # nth non-empty, non-comment line from pairs.conf
  local idx="$1"
  local cfg="${XDG_CONFIG_HOME:-$HOME/.config}/seasoning/pairs.conf"
  [[ -f "$cfg" ]] || cfg="/usr/share/seasoning/pairs.conf"
  awk 'NF && $0 !~ /^[[:space:]]*#/' "$cfg" | sed -n "$((idx+1))p"
}

# -- commands --------------------------------------------------------------
cmd_which_output(){ parse_output "$@"; printf '\n'; }

cmd_list(){
  local what="${1:-}"; shift || true
  case "$what" in
    clock)
      echo "clock:"
      local i=0
      while IFS= read -r p; do printf '%5d\t%s\n' "$((++i))" "$p"; done < <(scan_plugins clock)
      ;;
    pairs)
      local cfg="${XDG_CONFIG_HOME:-$HOME/.config}/seasoning/pairs.conf"
      [[ -f "$cfg" ]] || cfg="/usr/share/seasoning/pairs.conf"
      echo "pairs: $cfg"
      nl -ba "$cfg" | sed -n '1,200p'
      ;;
    *) die "usage: seasoning list {clock|pairs}";;
  esac
}

run_clock_json(){  # why JSON wrapper: Waybar expects return-type=json
  local out; out="$(parse_output "$@")"
  local idx_file; idx_file="$(state_file "$out" clock.state)"
  local idx; idx="$(read_int "$idx_file" 0)"

  mapfile -t PLUGS < <(scan_plugins clock)
  local total="${#PLUGS[@]}"
  (( total > 0 )) || die "no clock plugins found"
  (( idx >= 0 && idx < total )) || idx=0

  local plug="${PLUGS[$idx]}"
  # plugin outputs raw text for the clock
  local text; text="$("$plug" 2>/dev/null || true)"
  text="${text//$'\r'/}"
  local class; class="$(cls_from_path "$plug")"
  printf '{"text":"%s","class":"%s"}\n' "$(json_escape "$text")" "$class"
}

run_pair_side(){  # why: pairs are strings, not JSON
  local side="$1"; shift || true
  local out; out="$(parse_output "$@")"
  local idx_file; idx_file="$(state_file "$out" pair.state)"
  local idx; idx="$(read_int "$idx_file" 0)"

  local line; line="$(pair_line_at "$idx")"
  [[ -n "$line" ]] || { echo ""; return; }

  IFS='|' read -r L R <<<"$line"
  local name=""
  case "$side" in left)  name="$L";;
                 right) name="$R";;
                 *) die "invalid side";;
  esac

  # pick directory based on side
  local dir="$BASE_DIR/${side}.d"
  local path="$dir/$name.sh"
  [[ -x "$path" ]] || { echo ""; return; }
  "$path"
}

cmd_run(){
  local what="${1:-}"; shift || true
  case "$what" in
    clock) run_clock_json "$@";;
    pair)
      local side="${1:-}"; shift || true
      case "$side" in left|right) run_pair_side "$side" "$@";;
        *) die "usage: seasoning run pair {left|right} [--output NAME]";;
      esac
      ;;
    *) die "usage: seasoning run {clock|pair} ...";;
  esac
}

bump_index(){  # why: persist per-output selection and signal Waybar
  local which="$1" sig="$2" out="$3"
  local file; file="$(state_file "$out" "$which.state")"
  local idx; idx="$(read_int "$file" 0)"
  local total
  case "$which" in
    clock) total="$(count_plugins clock)";;
    pair)  total="$(awk 'NF && $0 !~ /^[[:space:]]*#/' "${XDG_CONFIG_HOME:-$HOME/.config}/seasoning/pairs.conf" 2>/dev/null | wc -l | tr -d ' ')"
           [[ "$total" == "0" ]] && total="$(awk 'NF && $0 !~ /^[[:space:]]*#/' "/usr/share/seasoning/pairs.conf" | wc -l | tr -d ' ')" ;;
    *) die "invalid index type";;
  esac
  (( total > 0 )) || total=1
  idx=$(( (idx + 1) % total ))
  write_int "$file" "$idx"
  pkill -x -RTMIN+"$sig" waybar || true
}

cmd_ctl(){
  local which="${1:-}"; shift || true
  case "$which" in
    clock)
      [[ "${1:-}" == "cycle" ]] || die "usage: seasoning ctl clock cycle [--output NAME]"
      shift || true
      local out; out="$(parse_output "$@")"
      bump_index "clock" 6 "$out"
      ;;
    pair)
      [[ "${1:-}" == "cycle" ]] || die "usage: seasoning ctl pair cycle [--output NAME]"
      shift || true
      local out; out="$(parse_output "$@")"
      bump_index "pair" 5 "$out"
      ;;
    *) die "usage: seasoning ctl {clock|pair} cycle [--output NAME]";;
  esac
}

ctl_clock(){
  local sub="$1"; shift || true
  local out; out="$(parse_output)"
  local f="$HOME/.cache/seasoning/$out/clock.state"
  mkdir -p "$(dirname "$f")"
  local idx; idx=$(cat "$f" 2>/dev/null || echo 0)
  case "$sub" in
    cycle) idx=$(( (idx+1) % $(/usr/bin/seasoning list clock | tail -n +2 | wc -l) ));;
    prev)  idx=$(( (idx-1+$(/usr/bin/seasoning list clock | tail -n +2 | wc -l)) % $(/usr/bin/seasoning list clock | tail -n +2 | wc -l) ));;
    set)   idx="${1:-0}";;
    *)     echo "usage: seasoning ctl clock {cycle|prev|set N}" >&2; return 2;;
  esac
  echo "$idx" >"$f"
  pkill -x -RTMIN+6 waybar || true
}

ctl_pair(){
  local sub="$1"; shift || true
  local out; out="$(parse_output)"
  local f="$HOME/.cache/seasoning/$out/pair.state"
  mkdir -p "$(dirname "$f")"
  local idx; idx=$(cat "$f" 2>/dev/null || echo 0)
  local total; total=$(awk 'NF && $0 !~ /^#/' "${XDG_CONFIG_HOME:-$HOME/.config}/seasoning/pairs.conf" 2>/dev/null | wc -l)
  (( total > 0 )) || { echo "no pairs configured" >&2; return 1; }
  case "$sub" in
    cycle) idx=$(( (idx+1) % total ));;
    prev)  idx=$(( (idx-1+total) % total ));;
    set)   idx="${1:-0}";;
    *)     echo "usage: seasoning ctl pair {cycle|prev|set N}" >&2; return 2;;
  esac
  echo "$idx" >"$f"
  pkill -x -RTMIN+5 waybar || true
}

# -- main -------------------------------------------------------------------
main(){
  local cmd="${1:-}"; shift || true
  case "$cmd" in
    which-output) cmd_which_output "$@";;
    list)         cmd_list "$@";;
    run)          cmd_run "$@";;
    ctl)          cmd_ctl "$@";;
    *) die "usage: seasoning {which-output|list|run|ctl} ...";;
  esac
}
main "$@"
